{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth';\r\n \r\nexport const authConfig = {\r\n  pages: {\r\n    signIn: '/login',\r\n  },\r\n  callbacks: {\r\n    authorized({ auth, request: { nextUrl } }) {\r\n      const isLoggedIn = !!auth?.user;\r\n      const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');\r\n      if (isOnDashboard) {\r\n        if (isLoggedIn) return true;\r\n        return false; // Redirect unauthenticated users to login page\r\n      } else if (isLoggedIn) {\r\n        return Response.redirect(new URL('/dashboard', nextUrl));\r\n      }\r\n      return true;\r\n    },\r\n  },\r\n  providers: [], // Add providers with an empty array for now\r\n} satisfies NextAuthConfig;"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAClD,IAAI,eAAe;gBACjB,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D,OAAO,IAAI,YAAY;gBACrB,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,cAAc;YACjD;YACA,OAAO;QACT;IACF;IACA,WAAW,EAAE;AACf","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\r\nimport Credentials from 'next-auth/providers/credentials';\r\nimport { authConfig } from './auth.config';\r\nimport { z } from 'zod';\r\nimport type { User } from '@/app/lib/definitions';\r\nimport bcrypt from 'bcrypt';\r\nimport postgres from 'postgres';\r\n \r\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\r\n \r\nasync function getUser(email: string): Promise<User | undefined> {\r\n  try {\r\n    const user = await sql<User[]>`SELECT * FROM users WHERE email=${email}`;\r\n    return user[0];\r\n  } catch (error) {\r\n    console.error('Failed to fetch user:', error);\r\n    throw new Error('Failed to fetch user.');\r\n  }\r\n}\r\n \r\nexport const { auth, signIn, signOut } = NextAuth({\r\n  ...authConfig,\r\n  providers: [\r\n    Credentials({\r\n      async authorize(credentials) {\r\n        const parsedCredentials = z\r\n          .object({ email: z.string().email(), password: z.string().min(6) })\r\n          .safeParse(credentials);\r\n \r\n        if (parsedCredentials.success) {\r\n            const { email, password } = parsedCredentials.data;\r\n            const user = await getUser(email);\r\n            if (!user) return null;\r\n            const passwordsMatch = await bcrypt.compare(password, user.password);\r\n   \r\n            if (passwordsMatch) return user;\r\n        }\r\n \r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n});"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;AAEA,MAAM,MAAM,CAAA,GAAA,6LAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAEjE,eAAe,QAAQ,KAAa;IAClC,IAAI;QACF,MAAM,OAAO,MAAM,GAAW,CAAC,gCAAgC,EAAE,MAAM,CAAC;QACxE,OAAO,IAAI,CAAC,EAAE;IAChB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,iQAAA,CAAA,UAAQ,AAAD,EAAE;IAChD,GAAG,8GAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,sNAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM,WAAU,WAAW;gBACzB,MAAM,oBAAoB,mOAAA,CAAA,IAAC,CACxB,MAAM,CAAC;oBAAE,OAAO,mOAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;oBAAI,UAAU,mOAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAAG,GAChE,SAAS,CAAC;gBAEb,IAAI,kBAAkB,OAAO,EAAE;oBAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,kBAAkB,IAAI;oBAClD,MAAM,OAAO,MAAM,QAAQ;oBAC3B,IAAI,CAAC,MAAM,OAAO;oBAClB,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBAEnE,IAAI,gBAAgB,OAAO;gBAC/B;gBAEA,OAAO;YACT;QACF;KACD;AACH","debugId":null}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/app/lib/actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { signIn } from '@/auth';\r\nimport { AuthError } from 'next-auth';\r\nimport { z } from 'zod';\r\nimport { revalidatePath } from 'next/cache';\r\nimport { redirect } from 'next/navigation';\r\nimport postgres from 'postgres';\r\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\r\n \r\nconst FormSchema = z.object({\r\n  id: z.string(),\r\n  customerId: z.string({\r\n    invalid_type_error: 'Please select a customer.',\r\n  }),\r\n  amount: z.coerce\r\n    .number()\r\n    .gt(0, { message: 'Please enter an amount greater than $0.' }),\r\n  status: z.enum(['pending', 'paid'], {\r\n    invalid_type_error: 'Please select an invoice status.',\r\n  }),\r\n  date: z.string(),\r\n});\r\n \r\nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\r\n\r\nexport type State = {\r\n  errors?: {\r\n    customerId?: string[];\r\n    amount?: string[];\r\n    status?: string[];\r\n  };\r\n  message?: string | null;\r\n};\r\n\r\nexport async function createInvoice(prevState: State, formData: FormData) {\r\n  // Validate form using Zod\r\n  const validatedFields = CreateInvoice.safeParse({\r\n    customerId: formData.get('customerId'),\r\n    amount: formData.get('amount'),\r\n    status: formData.get('status'),\r\n  });\r\n \r\n  // If form validation fails, return errors early. Otherwise, continue.\r\n  if (!validatedFields.success) {\r\n    return {\r\n      errors: validatedFields.error.flatten().fieldErrors,\r\n      message: 'Missing Fields. Failed to Create Invoice.',\r\n    };\r\n  }\r\n \r\n  // Prepare data for insertion into the database\r\n  const { customerId, amount, status } = validatedFields.data;\r\n  const amountInCents = amount * 100;\r\n  const date = new Date().toISOString().split('T')[0];\r\n \r\n  // Insert data into the database\r\n  try {\r\n    await sql`\r\n      INSERT INTO invoices (customer_id, amount, status, date)\r\n      VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\r\n    `;\r\n  } catch (error) {\r\n    // If a database error occurs, return a more specific error.\r\n    return {\r\n      message: 'Database Error: Failed to Create Invoice.',\r\n    };\r\n  }\r\n \r\n  // Revalidate the cache for the invoices page and redirect the user.\r\n  revalidatePath('/dashboard/invoices');\r\n  redirect('/dashboard/invoices');\r\n}\r\n\r\n// Use Zod to update the expected types\r\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true });\r\n\r\nexport async function updateInvoice(id: string, formData: FormData) {\r\n  const { customerId, amount, status } = UpdateInvoice.parse({\r\n    customerId: formData.get('customerId'),\r\n    amount: formData.get('amount'),\r\n    status: formData.get('status'),\r\n  });\r\n \r\n  const amountInCents = amount * 100;\r\n \r\n  try {\r\n    await sql`\r\n      UPDATE invoices\r\n      SET customer_id = ${customerId}, amount = ${amountInCents}, status = ${status}\r\n      WHERE id = ${id}\r\n    `;\r\n  } catch (error) {\r\n    console.error('Error updating invoice:', error);\r\n  }\r\n \r\n  revalidatePath('/dashboard/invoices');\r\n  redirect('/dashboard/invoices');\r\n}\r\n\r\nexport async function deleteInvoice(id: string) {\r\n  throw new Error('Failed to Delete Invoice');\r\n  \r\n  await sql`DELETE FROM invoices WHERE id = ${id}`;\r\n  revalidatePath('/dashboard/invoices');\r\n}\r\n\r\nexport async function authenticate(\r\n  prevState: string | undefined,\r\n  formData: FormData,\r\n) {\r\n  try {\r\n    await signIn('credentials', formData);\r\n  } catch (error) {\r\n    if (error instanceof AuthError) {\r\n      switch (error.type) {\r\n        case 'CredentialsSignin':\r\n          return 'Invalid credentials.';\r\n        default:\r\n          return 'Something went wrong.';\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/.next-internal/server/app/dashboard/invoices/create/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '0089283821c506aa6072e3b0021e4d0861b6b8e720'} from 'ACTIONS_MODULE0'\nexport {createInvoice as '60408de2e64f62a06f247cdb13079e9359ea94da46'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/app/ui/invoices/create-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/invoices/create-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/invoices/create-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,sVAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","debugId":null}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/app/ui/invoices/create-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/invoices/create-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/invoices/create-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,sVAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/app/ui/invoices/breadcrumbs.tsx"],"sourcesContent":["import { clsx } from 'clsx';\r\nimport Link from 'next/link';\r\nimport { lusitana } from '@/app/ui/fonts';\r\n\r\ninterface Breadcrumb {\r\n  label: string;\r\n  href: string;\r\n  active?: boolean;\r\n}\r\n\r\nexport default function Breadcrumbs({\r\n  breadcrumbs,\r\n}: {\r\n  breadcrumbs: Breadcrumb[];\r\n}) {\r\n  return (\r\n    <nav aria-label=\"Breadcrumb\" className=\"mb-6 block\">\r\n      <ol className={clsx(lusitana.className, 'flex text-xl md:text-2xl')}>\r\n        {breadcrumbs.map((breadcrumb, index) => (\r\n          <li\r\n            key={breadcrumb.href}\r\n            aria-current={breadcrumb.active}\r\n            className={clsx(\r\n              breadcrumb.active ? 'text-gray-900' : 'text-gray-500',\r\n            )}\r\n          >\r\n            <Link href={breadcrumb.href}>{breadcrumb.label}</Link>\r\n            {index < breadcrumbs.length - 1 ? (\r\n              <span className=\"mx-3 inline-block\">/</span>\r\n            ) : null}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;;AAQe,SAAS,YAAY,EAClC,WAAW,EAGZ;IACC,qBACE,uVAAC;QAAI,cAAW;QAAa,WAAU;kBACrC,cAAA,uVAAC;YAAG,WAAW,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EAAE,mLAAA,CAAA,WAAQ,CAAC,SAAS,EAAE;sBACrC,YAAY,GAAG,CAAC,CAAC,YAAY,sBAC5B,uVAAC;oBAEC,gBAAc,WAAW,MAAM;oBAC/B,WAAW,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EACZ,WAAW,MAAM,GAAG,kBAAkB;;sCAGxC,uVAAC,qQAAA,CAAA,UAAI;4BAAC,MAAM,WAAW,IAAI;sCAAG,WAAW,KAAK;;;;;;wBAC7C,QAAQ,YAAY,MAAM,GAAG,kBAC5B,uVAAC;4BAAK,WAAU;sCAAoB;;;;;mCAClC;;mBATC,WAAW,IAAI;;;;;;;;;;;;;;;AAehC","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\r\n\r\nexport const formatCurrency = (amount: number) => {\r\n  return (amount / 100).toLocaleString('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n};\r\n\r\nexport const formatDateToLocal = (\r\n  dateStr: string,\r\n  locale: string = 'en-US',\r\n) => {\r\n  const date = new Date(dateStr);\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    day: 'numeric',\r\n    month: 'short',\r\n    year: 'numeric',\r\n  };\r\n  const formatter = new Intl.DateTimeFormat(locale, options);\r\n  return formatter.format(date);\r\n};\r\n\r\nexport const generateYAxis = (revenue: Revenue[]) => {\r\n  // Calculate what labels we need to display on the y-axis\r\n  // based on highest record and in 1000s\r\n  const yAxisLabels = [];\r\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\r\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\r\n\r\n  for (let i = topLabel; i >= 0; i -= 1000) {\r\n    yAxisLabels.push(`$${i / 1000}K`);\r\n  }\r\n\r\n  return { yAxisLabels, topLabel };\r\n};\r\n\r\nexport const generatePagination = (currentPage: number, totalPages: number) => {\r\n  // If the total number of pages is 7 or less,\r\n  // display all pages without any ellipsis.\r\n  if (totalPages <= 7) {\r\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\r\n  }\r\n\r\n  // If the current page is among the first 3 pages,\r\n  // show the first 3, an ellipsis, and the last 2 pages.\r\n  if (currentPage <= 3) {\r\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\r\n  }\r\n\r\n  // If the current page is among the last 3 pages,\r\n  // show the first 2, an ellipsis, and the last 3 pages.\r\n  if (currentPage >= totalPages - 2) {\r\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\r\n  }\r\n\r\n  // If the current page is somewhere in the middle,\r\n  // show the first page, an ellipsis, the current page and its neighbors,\r\n  // another ellipsis, and the last page.\r\n  return [\r\n    1,\r\n    '...',\r\n    currentPage - 1,\r\n    currentPage,\r\n    currentPage + 1,\r\n    '...',\r\n    totalPages,\r\n  ];\r\n};\r\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\r\nimport {\r\n  CustomerField,\r\n  CustomersTableType,\r\n  InvoiceForm,\r\n  InvoicesTable,\r\n  LatestInvoiceRaw,\r\n  Revenue,\r\n} from './definitions';\r\nimport { formatCurrency } from './utils';\r\n\r\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\r\n\r\nexport async function fetchRevenue() {\r\n  try {\r\n    // Artificially delay a response for demo purposes.\r\n    // Don't do this in production :)\r\n\r\n    console.log('Fetching revenue data...');\r\n    await new Promise((resolve) => setTimeout(resolve, 3000));\r\n\r\n    const data = await sql<Revenue[]>`SELECT * FROM revenue`;\r\n\r\n    console.log('Data fetch completed after 3 seconds.');\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch revenue data.');\r\n  }\r\n}\r\n\r\nexport async function fetchLatestInvoices() {\r\n  try {\r\n    const data = await sql<LatestInvoiceRaw[]>`\r\n      SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\r\n      FROM invoices\r\n      JOIN customers ON invoices.customer_id = customers.id\r\n      ORDER BY invoices.date DESC\r\n      LIMIT 5`;\r\n\r\n    const latestInvoices = data.map((invoice) => ({\r\n      ...invoice,\r\n      amount: formatCurrency(invoice.amount),\r\n    }));\r\n    return latestInvoices;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch the latest invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchCardData() {\r\n  try {\r\n    // You can probably combine these into a single SQL query\r\n    // However, we are intentionally splitting them to demonstrate\r\n    // how to initialize multiple queries in parallel with JS.\r\n    const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\r\n    const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\r\n    const invoiceStatusPromise = sql`SELECT\r\n         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\r\n         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\r\n         FROM invoices`;\r\n\r\n    const data = await Promise.all([\r\n      invoiceCountPromise,\r\n      customerCountPromise,\r\n      invoiceStatusPromise,\r\n    ]);\r\n\r\n    const numberOfInvoices = Number(data[0][0].count ?? '0');\r\n    const numberOfCustomers = Number(data[1][0].count ?? '0');\r\n    const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\r\n    const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\r\n\r\n    return {\r\n      numberOfCustomers,\r\n      numberOfInvoices,\r\n      totalPaidInvoices,\r\n      totalPendingInvoices,\r\n    };\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch card data.');\r\n  }\r\n}\r\n\r\nconst ITEMS_PER_PAGE = 6;\r\nexport async function fetchFilteredInvoices(\r\n  query: string,\r\n  currentPage: number,\r\n) {\r\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\r\n\r\n  try {\r\n    const invoices = await sql<InvoicesTable[]>`\r\n      SELECT\r\n        invoices.id,\r\n        invoices.amount,\r\n        invoices.date,\r\n        invoices.status,\r\n        customers.name,\r\n        customers.email,\r\n        customers.image_url\r\n      FROM invoices\r\n      JOIN customers ON invoices.customer_id = customers.id\r\n      WHERE\r\n        customers.name ILIKE ${`%${query}%`} OR\r\n        customers.email ILIKE ${`%${query}%`} OR\r\n        invoices.amount::text ILIKE ${`%${query}%`} OR\r\n        invoices.date::text ILIKE ${`%${query}%`} OR\r\n        invoices.status ILIKE ${`%${query}%`}\r\n      ORDER BY invoices.date DESC\r\n      LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\r\n    `;\r\n\r\n    return invoices;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchInvoicesPages(query: string) {\r\n  try {\r\n    const data = await sql`SELECT COUNT(*)\r\n    FROM invoices\r\n    JOIN customers ON invoices.customer_id = customers.id\r\n    WHERE\r\n      customers.name ILIKE ${`%${query}%`} OR\r\n      customers.email ILIKE ${`%${query}%`} OR\r\n      invoices.amount::text ILIKE ${`%${query}%`} OR\r\n      invoices.date::text ILIKE ${`%${query}%`} OR\r\n      invoices.status ILIKE ${`%${query}%`}\r\n  `;\r\n\r\n    const totalPages = Math.ceil(Number(data[0].count) / ITEMS_PER_PAGE);\r\n    return totalPages;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch total number of invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchInvoiceById(id: string) {\r\n  try {\r\n    const data = await sql<InvoiceForm[]>`\r\n      SELECT\r\n        invoices.id,\r\n        invoices.customer_id,\r\n        invoices.amount,\r\n        invoices.status\r\n      FROM invoices\r\n      WHERE invoices.id = ${id};\r\n    `;\r\n\r\n    const invoice = data.map((invoice) => ({\r\n      ...invoice,\r\n      // Convert amount from cents to dollars\r\n      amount: invoice.amount / 100,\r\n    }));\r\n\r\n    console.log(invoice); // Invoice is an empty array []\r\n    return invoice[0];\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch invoice.');\r\n  }\r\n}\r\n\r\nexport async function fetchCustomers() {\r\n  try {\r\n    const customers = await sql<CustomerField[]>`\r\n      SELECT\r\n        id,\r\n        name\r\n      FROM customers\r\n      ORDER BY name ASC\r\n    `;\r\n\r\n    return customers;\r\n  } catch (err) {\r\n    console.error('Database Error:', err);\r\n    throw new Error('Failed to fetch all customers.');\r\n  }\r\n}\r\n\r\nexport async function fetchFilteredCustomers(query: string) {\r\n  try {\r\n    const data = await sql<CustomersTableType[]>`\r\n\t\tSELECT\r\n\t\t  customers.id,\r\n\t\t  customers.name,\r\n\t\t  customers.email,\r\n\t\t  customers.image_url,\r\n\t\t  COUNT(invoices.id) AS total_invoices,\r\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\r\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\r\n\t\tFROM customers\r\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\r\n\t\tWHERE\r\n\t\t  customers.name ILIKE ${`%${query}%`} OR\r\n        customers.email ILIKE ${`%${query}%`}\r\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\r\n\t\tORDER BY customers.name ASC\r\n\t  `;\r\n\r\n    const customers = data.map((customer) => ({\r\n      ...customer,\r\n      total_pending: formatCurrency(customer.total_pending),\r\n      total_paid: formatCurrency(customer.total_paid),\r\n    }));\r\n\r\n    return customers;\r\n  } catch (err) {\r\n    console.error('Database Error:', err);\r\n    throw new Error('Failed to fetch customer table.');\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 719, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/andre/Documents/workspace/.git/vercel_next-js/nextjs-dashboard/app/dashboard/invoices/create/page.tsx"],"sourcesContent":["import Form from '@/app/ui/invoices/create-form';\r\nimport Breadcrumbs from '@/app/ui/invoices/breadcrumbs';\r\nimport { fetchCustomers } from '@/app/lib/data';\r\n \r\nexport default async function Page() {\r\n  const customers = await fetchCustomers();\r\n \r\n  return (\r\n    <main>\r\n      <Breadcrumbs\r\n        breadcrumbs={[\r\n          { label: 'Invoices', href: '/dashboard/invoices' },\r\n          {\r\n            label: 'Create Invoice',\r\n            href: '/dashboard/invoices/create',\r\n            active: true,\r\n          },\r\n        ]}\r\n      />\r\n      <Form customers={customers} />\r\n    </main>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,YAAY,MAAM,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD;IAErC,qBACE,uVAAC;;0BACC,uVAAC,qIAAA,CAAA,UAAW;gBACV,aAAa;oBACX;wBAAE,OAAO;wBAAY,MAAM;oBAAsB;oBACjD;wBACE,OAAO;wBACP,MAAM;wBACN,QAAQ;oBACV;iBACD;;;;;;0BAEH,uVAAC,wIAAA,CAAA,UAAI;gBAAC,WAAW;;;;;;;;;;;;AAGvB","debugId":null}}]
}